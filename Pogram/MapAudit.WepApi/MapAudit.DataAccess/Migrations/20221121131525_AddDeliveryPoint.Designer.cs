// <auto-generated />
using System;
using MapAudit.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MapAudit.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221121131525_AddDeliveryPoint")]
    partial class AddDeliveryPoint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MapAudit.DataAccess.Models.Carrier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AverageSpeedPerKmInTown")
                        .HasColumnType("int");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrivingExpirienceYears")
                        .HasColumnType("int");

                    b.Property<int>("FuelConsumptionInLitersInTownPer100Km")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TruckType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.DeliveryPath", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<long>("FromId")
                        .HasColumnType("bigint");

                    b.Property<double>("Hours")
                        .HasColumnType("float");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ToId");

                    b.ToTable("DeliveryPaths");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.DeliveryPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDestination")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrigin")
                        .HasColumnType("bit");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("DeliveryPoints");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CarrierId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.Carrier", b =>
                {
                    b.HasOne("MapAudit.DataAccess.Models.Company", "Company")
                        .WithMany("Carriers")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.DeliveryPath", b =>
                {
                    b.HasOne("MapAudit.DataAccess.Models.DeliveryPoint", "From")
                        .WithMany("DeliveryPathsFrom")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MapAudit.DataAccess.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MapAudit.DataAccess.Models.DeliveryPoint", "To")
                        .WithMany("DeliveryPathsTo")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("Order");

                    b.Navigation("To");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.DeliveryPoint", b =>
                {
                    b.HasOne("MapAudit.DataAccess.Models.Order", null)
                        .WithMany("DeliveryPoints")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.Order", b =>
                {
                    b.HasOne("MapAudit.DataAccess.Models.Carrier", "Carrier")
                        .WithMany("Orders")
                        .HasForeignKey("CarrierId");

                    b.HasOne("MapAudit.DataAccess.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Carrier");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.Carrier", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.Company", b =>
                {
                    b.Navigation("Carriers");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.DeliveryPoint", b =>
                {
                    b.Navigation("DeliveryPathsFrom");

                    b.Navigation("DeliveryPathsTo");
                });

            modelBuilder.Entity("MapAudit.DataAccess.Models.Order", b =>
                {
                    b.Navigation("DeliveryPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
